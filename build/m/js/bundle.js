/**
 * MicroEvent - to make any js object an event emitter (server or browser)
 *
 * - pure javascript - server compatible, browser compatible
 * - dont rely on the browser doms
 * - super simple - you get it immediatly, no mistery, no magic involved
 *
 * - create a MicroEventDebug with goodies to debug
 *   - make it safer to use
 */

var MicroEvent	= function(){};
MicroEvent.prototype	= {
  bind	: function(event, fct){
    this._events = this._events || {};
    this._events[event] = this._events[event]	|| [];
    this._events[event].push(fct);
  },
  unbind	: function(event, fct){
    this._events = this._events || {};
    if( event in this._events === false  )	return;
    this._events[event].splice(this._events[event].indexOf(fct), 1);
  },
  trigger	: function(event /* , args... */){
    this._events = this._events || {};
    if( event in this._events === false  )	return;
    for(var i = 0; i < this._events[event].length; i++){
      this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
    }
  }
};

/**
 * mixin will delegate all MicroEvent.js function in the destination object
 *
 * - require('MicroEvent').mixin(Foobar) will make Foobar able to use MicroEvent
 *
 * @param {Object} the object which will support MicroEvent
 */
MicroEvent.mixin	= function(destObject){
  var props	= ['bind', 'unbind', 'trigger'];
  for(var i = 0; i < props.length; i ++){
    if( typeof destObject === 'function' ){
      destObject.prototype[props[i]]	= MicroEvent.prototype[props[i]];
    }else{
      destObject[props[i]] = MicroEvent.prototype[props[i]];
    }
  }
  return destObject;
}

// export in common js
if( typeof module !== "undefined" && ('exports' in module)){
  module.exports	= MicroEvent;
}
// Generated by CoffeeScript 1.12.0
(function() {
  var ChatApiBasic;

  ChatApiBasic = (function() {
    function ChatApiBasic(config) {
      this.config = config;
    }

    ChatApiBasic.prototype.request = function(path, request, onComplete) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/' + path,
        onComplete: (function(data) {
          data = JSON.parse(data);
          if (data.error) {
            throw new Error(data.error);
          }
          return onComplete(data);
        }).bind(this)
      }).get(request);
    };

    ChatApiBasic.prototype.startSocket = function(token) {
      var socket;
      this.token = token;
      if (this.config.baseUrl) {
        socket = io.connect(this.config.baseUrl);
      } else {
        socket = io.connect();
      }
      this.socket = socket;
      return socket.on('connect', (function() {
        return socket.emit('authenticate', {
          token: token
        });
      }).bind(this)).on('event', (function(data) {
        console.log(data);
        return this.trigger(data.type, data);
      }).bind(this)).on('unauthorized', function(msg) {
        msg.data.token = token;
        return console.error(msg.data);
      });
    };

    return ChatApiBasic;

  })();

  window.ChatApiBasic = ChatApiBasic;

}).call(this);

//# sourceMappingURL=ChatApiBasic.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var ChatApi,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ChatApi = (function(superClass) {
    extend(ChatApi, superClass);

    function ChatApi(token, config) {
      this.token = token;
      this.config = config;
      MicroEvent.mixin(this);
      this.initDeliveredLogic();
    }

    ChatApi.prototype.restart = function() {
      this.socket.disconnect();
      return this.socket.connect();
    };

    ChatApi.prototype.login = function(onComplete) {
      throw new Error('login is not supported');
    };

    ChatApi.prototype.start = function() {
      throw new Error('abstract');
    };

    ChatApi.prototype.initDeliveredLogic = function(chatId) {
      return this.bind('newUserMessages', (function(data) {
        return this.markAsDelivered(data.messages);
      }).bind(this));
    };

    ChatApi.prototype.loadHistory = function() {
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/list',
        onComplete: (function(messages) {
          messages = JSON.parse(messages);
          if (messages.length === 0) {
            return;
          }
          this.markAsDelivered(messages);
          return this.trigger('historyLoaded', messages);
        }).bind(this)
      }).get({
        token: this.token,
        chatId: this.chatId
      });
    };

    ChatApi.prototype.sendMessage = function(message, onComplete) {
      if (!this.chatId) {
        throw new Error('Chat has not started');
      }
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/send',
        onComplete: onComplete
      }).get({
        token: this.token,
        chatId: this.chatId,
        message: message
      });
    };

    ChatApi.prototype.sendUserMessage = function(message, userId, onComplete) {
      if (!this.chatId) {
        throw new Error('Chat has not started');
      }
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/userSend',
        onComplete: onComplete
      }).get({
        token: this.token,
        userId: userId,
        chatId: this.chatId,
        message: message
      });
    };

    ChatApi.prototype.loadUserInfo = function(phoneOrId, onComplete) {
      if (phoneOrId.length === 11) {
        return new Request({
          url: this.config.baseUrl + '/api/v1/user/info',
          onComplete: (function(userInfo) {
            userInfo = JSON.parse(userInfo);
            return onComplete(userInfo);
          })
        }).get({
          phone: phoneOrId
        });
      } else {
        return new Request({
          url: this.config.baseUrl + '/api/v1/user/info',
          onComplete: (function(userInfo) {
            userInfo = JSON.parse(userInfo);
            return onComplete(userInfo);
          })
        }).get({
          id: phoneOrId
        });
      }
    };

    ChatApi.prototype.markAsDelivered = function(messages) {
      return this.markAs('delivered', messages);
    };

    ChatApi.prototype.markAsViewed = function(messages) {
      return this.markAs('viewed', messages);
    };

    ChatApi.prototype.ucFirst = function(str) {
      var f;
      f = str.charAt(0).toUpperCase();
      return f + str.substr(1, str.length - 1);
    };

    ChatApi.prototype.markAs = function(keyword, messages) {
      var arrangedMessages, chatId, eventType, i, len, message, messageIds, results;
      messages = messages.filter((function(message) {
        return message.userId !== this.user._id;
      }).bind(this));
      messages = messages.filter(function(message) {
        return !message[keyword];
      });
      if (messages.length === 0) {
        return;
      }
      arrangedMessages = {};
      for (i = 0, len = messages.length; i < len; i++) {
        message = messages[i];
        if (!message.chatId) {
          throw new Error('message.chatId is required');
        }
        if (!arrangedMessages[message.chatId]) {
          arrangedMessages[message.chatId] = [];
        }
        arrangedMessages[message.chatId].push(message);
      }
      eventType = 'markAs' + this.ucFirst(keyword);
      console.log(eventType);
      results = [];
      for (chatId in arrangedMessages) {
        messages = arrangedMessages[chatId];
        messageIds = messages.map(function(message) {
          return message._id;
        });
        results.push(this.socket.emit(eventType, {
          messageIds: messageIds.join(','),
          chatId: chatId
        }));
      }
      return results;
    };

    return ChatApi;

  })(ChatApiBasic);

  ChatApi.tts = function(timestamp) {
    var date, formattedTime, hours, minutes, monthNames;
    date = new Date(timestamp);
    hours = date.getHours();
    monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    minutes = "0" + date.getMinutes();
    formattedTime = date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + hours + ':' + minutes.substr(-2);
    return formattedTime;
  };

  window.ChatApi = ChatApi;

}).call(this);

//# sourceMappingURL=ChatApi.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var ChatApiStandby,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ChatApiStandby = (function(superClass) {
    extend(ChatApiStandby, superClass);

    function ChatApiStandby(user, config) {
      if (!user.token) {
        console.error(user);
        throw new Error('user object must have token param');
      }
      ChatApiStandby.__super__.constructor.call(this, user.token, config);
    }

    ChatApiStandby.prototype.start = function(onStart) {
      return this.startSocket(this.token, onStart);
    };

    ChatApiStandby.prototype.startSocket = function(token, onAuthenticated) {
      var socket;
      socket = ChatApiStandby.__super__.startSocket.call(this, token);
      return socket.on('authenticated', function() {
        return onAuthenticated();
      });
    };

    return ChatApiStandby;

  })(ChatApi);

  window.ChatApiStandby = ChatApiStandby;

}).call(this);

//# sourceMappingURL=ChatApiStandby.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var ChatApiJoined,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ChatApiJoined = (function(superClass) {
    extend(ChatApiJoined, superClass);

    function ChatApiJoined() {
      return ChatApiJoined.__super__.constructor.apply(this, arguments);
    }

    ChatApiJoined.prototype.startSocket = function(token, chatId, onJoined) {
      var called, socket;
      socket = ChatApiJoined.__super__.startSocket.call(this, token);
      this.chatId = chatId;
      called = false;
      socket.on('authenticated', (function() {
        this.chatId = chatId;
        socket.emit('join', {
          chatId: chatId
        });
        if (called) {
          return;
        }
        called = true;
        return onJoined();
      }).bind(this));
      return socket;
    };

    ChatApiJoined.prototype.startChatWithUser = function(toUser, onComplete) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/chat/getOrCreateByTwoUsers',
        onComplete: (function(chat) {
          if (!chat) {
            return;
          }
          chat = JSON.parse(chat);
          if (chat.error) {
            throw new Error(chat.error);
          }
          this.data = chat;
          return this.startSocket(this.token, chat.chatId, onComplete);
        }).bind(this)
      }).get({
        token: this.token,
        userId: toUser._id
      });
    };

    return ChatApiJoined;

  })(ChatApi);

  window.ChatApiJoined = ChatApiJoined;

}).call(this);

//# sourceMappingURL=ChatApiJoined.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var ChatApiByPhone,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ChatApiByPhone = (function(superClass) {
    extend(ChatApiByPhone, superClass);

    function ChatApiByPhone(user, phone, config) {
      this.user = user;
      this.phone = phone;
      ChatApiByPhone.__super__.constructor.call(this, this.user.token, config);
    }

    ChatApiByPhone.prototype.start = function(onStart) {
      return this.loadUserInfo(this.phone, (function(toUser) {
        return this.startChatWithUser(toUser, (function() {
          this.toUser = toUser;
          this.started = true;
          return onStart(toUser);
        }).bind(this));
      }).bind(this));
    };

    return ChatApiByPhone;

  })(ChatApiJoined);

  window.ChatApiByPhone = ChatApiByPhone;

}).call(this);

//# sourceMappingURL=ChatApiByPhone.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var LoginBox;

  LoginBox = (function() {
    function LoginBox(parent) {
      this.parent = parent;
      this.container = new Element('div.loginBox').inject(this.parent);
      this.createPhoneBox();
      this.createCodeBox();
      this.codeBox.setStyle('display', 'none');
    }

    LoginBox.prototype.createPhoneBox = function() {
      this.phoneBox = new Element('div.phoneBox').inject(this.container);
      this.phoneInput = new Element('input', {
        placeholder: 'Phone Number',
        name: 'phone',
        type: 'number',
        maxlength: 11
      }).inject(this.phoneBox);
      this.sendCodeButton = new Element('button', {
        html: 'Send code to sms'
      }).inject(this.phoneBox);
      return new Element('a', {
        href: '#',
        html: '<p>I already have the code</p>'
      }).addEvent('click', (function(e) {
        e.preventDefault();
        return this.switchToCodeBox();
      }).bind(this)).inject(this.phoneBox);
    };

    LoginBox.prototype.createCodeBox = function() {
      this.codeBox = new Element('div.codeBox').inject(this.container);
      new Element('p', {
        html: 'Input code has sent to you by SMS in field below:'
      }).inject(this.codeBox);
      this.codeInput = new Element('input', {
        placeholder: 'Code',
        name: 'code',
        type: 'number',
        maxlength: 4
      }).inject(this.codeBox);
      this.loginButton = new Element('button', {
        html: 'Login'
      }).inject(this.codeBox);
      return new Element('a', {
        href: '#',
        html: '<p>Go back to phone input</p>'
      }).addEvent('click', (function() {
        return this.switchToLoginBox();
      }).bind(this)).inject(this.codeBox);
    };

    LoginBox.prototype.getPhone = function() {
      return this.phoneInput.get('value');
    };

    LoginBox.prototype.getCode = function() {
      return this.codeInput.get('value');
    };

    LoginBox.prototype.switchToCodeBox = function() {
      if (!this.phoneInput.get('value')) {
        alert('Phone is required');
        return;
      }
      this.phoneBox.setStyle('display', 'none');
      return this.codeBox.setStyle('display', 'block');
    };

    LoginBox.prototype.switchToLoginBox = function() {
      this.phoneBox.setStyle('display', 'block');
      return this.codeBox.setStyle('display', 'none');
    };

    return LoginBox;

  })();

  window.LoginBox = LoginBox;

}).call(this);

//# sourceMappingURL=LoginBox.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var LoginBoxConnect;

  LoginBoxConnect = (function() {
    function LoginBoxConnect(chatApi, loginBox) {
      this.chatApi = chatApi;
      this.loginBox = loginBox;
      this.initPhoneBox();
      this.initLoginBox();
    }

    LoginBoxConnect.prototype.initPhoneBox = function() {
      return this.loginBox.sendCodeButton.addEvent('click', (function() {
        return this.chatApi.request('sendCode', {
          phone: this.loginBox.getPhone()
        }, (function(data) {
          if (data.success) {
            return this.loginBox.switchToCodeBox();
          } else {
            return alert(data.error);
          }
        }).bind(this));
      }).bind(this));
    };

    LoginBoxConnect.prototype.initLoginBox = function() {
      return this.loginBox.loginButton.addEvent('click', (function() {
        return this.chatApi.request('login', {
          phone: this.loginBox.getPhone(),
          code: this.loginBox.getCode(),
          device: 'android'
        }, (function(user) {
          Ngn.LocalStorage.json.set('user', user);
          return window.location.reload(true);
        }).bind(this));
      }).bind(this));
    };

    return LoginBoxConnect;

  })();

  window.LoginBoxConnect = LoginBoxConnect;

}).call(this);

//# sourceMappingURL=LoginBoxConnect.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var ChatBox;

  ChatBox = (function() {
    function ChatBox(parent) {
      this.container = new Element('div.chatBox').inject(parent);
    }

    ChatBox.prototype.build = function(user, toUser, chatTitle) {
      var loginText, title;
      this.userInfo = user;
      title = new Element('div.titleBox').inject(this.container);
      if (chatTitle) {
        chatTitle = '<span class="chatTitle">' + chatTitle + '</span>';
      } else {
        chatTitle = '';
      }
      if (toUser.login) {
        loginText = '<span>' + toUser.login + '</span> ';
      } else {
        loginText = '';
      }
      title.set('html', 'Chat with <b>' + loginText + '+' + toUser.phone + '</b>');
      this.chatMessagesBox = new ChatMessagesBox(this);
      this.answerBox = new Element('div.answerBox').inject(this.container);
      new Element('div.authUser', {
        html: user.login
      }).inject(this.answerBox);
      this.messageInputBox = new MessageInputBox(this);
      return this.sendMessageButton = new SendMessageButton(this);
    };

    return ChatBox;

  })();

  window.ChatBox = ChatBox;

}).call(this);

//# sourceMappingURL=ChatBox.js.map

// Generated by CoffeeScript 1.11.1
(function() {
  var ChatMessagesBox;

  ChatMessagesBox = (function() {
    function ChatMessagesBox(chatBox) {
      this.chatBox = chatBox;
      this.container = new Element('div.messagesBox').inject(this.chatBox.container);
      this.messageBoxes = {};
    }

    ChatMessagesBox.prototype.addMessage = function(userInfo, message) {
      this._addMessage(userInfo, message);
      return this.scrollBottom();
    };

    ChatMessagesBox.prototype._addMessage = function(userInfo, message) {
      var mine;
      mine = this.chatBox.userInfo._id === userInfo._id;
      return this.messageBoxes[message._id] = new MessageBox(this, mine, userInfo, message);
    };

    ChatMessagesBox.prototype.scrollBottom = function() {
      return this.container.scrollTop = this.container.scrollHeight;
    };

    return ChatMessagesBox;

  })();

  window.ChatMessagesBox = ChatMessagesBox;

}).call(this);

//# sourceMappingURL=ChatMessagesBox.js.map

// Generated by CoffeeScript 1.11.1
(function() {
  var MessageBox;

  MessageBox = (function() {
    function MessageBox(chatMessageBox, mine, userInfo, message) {
      var eText;
      this.chatMessageBox = chatMessageBox;
      this.message = message;
      this.container = new Element('div.messageBox').inject(this.chatMessageBox.container, 'bottom');
      new Element('div.time', {
        html: ChatApi.tts(this.message.createTime)
      }).inject(this.container);
      this.mark = new Element('div.mark').inject(this.container);
      eText = new Element('div.text', {
        html: this.message.message
      }).inject(this.container);
      if (mine) {
        this.container.addClass('mine');
        new Element('div.arrow.right').inject(eText);
      } else {
        new Element('div.arrow.left').inject(eText);
      }
      if (this.message.delivered) {
        this.markAsDelivered();
      }
    }

    MessageBox.prototype.markAsDelivered = function() {
      this.mark.set('title', 'Delivered');
      return this.mark.set('html', '&#10004;');
    };

    MessageBox.prototype.markAsViewed = function() {
      this.mark.set('title', 'Viewed');
      return this.mark.set('html', '&#128065;');
    };

    return MessageBox;

  })();

  window.MessageBox = MessageBox;

}).call(this);

//# sourceMappingURL=MessageBox.js.map

// Generated by CoffeeScript 1.11.1
(function() {
  var MessageInputBox;

  MessageInputBox = (function() {
    function MessageInputBox(chatBox) {
      this.chatBox = chatBox;
      this.container = new Element('div.messageInputBox').inject(this.chatBox.answerBox);
      this.input = new Element('textarea', {
        placeholder: 'Type text here...'
      }).inject(this.container);
    }

    MessageInputBox.prototype.disable = function() {
      return this.input.set('disabled', true);
    };

    MessageInputBox.prototype.enable = function() {
      return this.input.set('disabled', false);
    };

    MessageInputBox.prototype.cleanup = function() {
      return this.input.set('value', '');
    };

    return MessageInputBox;

  })();

  window.MessageInputBox = MessageInputBox;

}).call(this);

//# sourceMappingURL=MessageInputBox.js.map

// Generated by CoffeeScript 1.11.1
(function() {
  var SendMessageButton;

  SendMessageButton = (function() {
    function SendMessageButton(chatBox) {
      this.chatBox = chatBox;
      this.button = new Element('button.sendMessage').inject(this.chatBox.answerBox);
      this.button.set('html', 'Send');
    }

    SendMessageButton.prototype.disable = function() {
      return this.button.set('disabled', true);
    };

    SendMessageButton.prototype.enable = function() {
      return this.button.set('disabled', false);
    };

    return SendMessageButton;

  })();

  window.SendMessageButton = SendMessageButton;

}).call(this);

//# sourceMappingURL=SendMessageButton.js.map

// Generated by CoffeeScript 1.11.1
(function() {
  var ChatBoxConnect;

  ChatBoxConnect = (function() {
    function ChatBoxConnect(chatApi, chatBox, usersListBox) {
      this.chatApi = chatApi;
      this.chatBox = chatBox;
      this.usersListBox = usersListBox;
    }

    ChatBoxConnect.prototype.start = function(onStart) {
      return this.chatApi.start((function(toUser) {
        this.toUser = toUser;
        this.initUsers();
        this.chatBox.build(this.chatApi.user, toUser, this.chatApi.chatId);
        this.chatApi.loadHistory();
        this.bindHistoryEvent();
        this.bindNewMessageEvent();
        this.bindSendButton();
        this.bindMessageDeliveredStatusChange();
        this.bindMessageViewedStatusChange();
        if (onStart) {
          return onStart();
        }
      }).bind(this));
    };

    ChatBoxConnect.prototype.initUsers = function() {
      this.users = {};
      this.addUser(this.chatApi.user);
      return this.addUser(this.toUser);
    };

    ChatBoxConnect.prototype.addUser = function(user) {
      return this.users[user._id] = user;
    };

    ChatBoxConnect.prototype.bindNewUserMessagesEvent = function() {};

    ChatBoxConnect.prototype.bindNewMessageEvent = function() {
      return this.chatApi.bind('newMessage', (function(data) {
        return this.addMessage(data.message);
      }).bind(this));
    };

    ChatBoxConnect.prototype._addMessage = function(message) {
      return this.chatBox.chatMessagesBox._addMessage(this.users[message.userId], message);
    };

    ChatBoxConnect.prototype.messages = [];

    ChatBoxConnect.prototype.addMessage = function(message) {
      this.messages.push(message);
      this._addMessage(message);
      this.chatBox.chatMessagesBox.scrollBottom();
      return this.markAsViewedRemitted();
    };

    ChatBoxConnect.prototype.markAsViewedRemitted = function() {
      if (this.viewedTimeoutId) {
        clearTimeout(this.viewedTimeoutId);
      }
      return this.viewedTimeoutId = setTimeout((function() {
        this.chatApi.markAsViewed(this.messages);
        return this.messages = [];
      }).bind(this), 100);
    };

    ChatBoxConnect.prototype.bindHistoryEvent = function() {
      return this.chatApi.bind('historyLoaded', (function(messages) {
        var i, j, ref;
        for (i = j = ref = messages.length - 1; j >= 0; i = j += -1) {
          this.addMessage(messages[i]);
        }
        return setTimeout((function() {
          return this.chatBox.chatMessagesBox.scrollBottom();
        }).bind(this), 1000);
      }).bind(this));
    };

    ChatBoxConnect.prototype.bindSendButton = function() {
      this.chatBox.messageInputBox.input.addEvent('keypress', (function(e) {
        if (e.code === 10 && e.control) {
          return this.sendMessage();
        }
      }).bind(this));
      return this.chatBox.sendMessageButton.button.addEvent('click', (function() {
        return this.sendMessage();
      }).bind(this));
    };

    ChatBoxConnect.prototype.sendMessage = function() {
      var message;
      message = this.chatBox.messageInputBox.input.get('value');
      if (!message) {
        return;
      }
      this.chatBox.messageInputBox.disable();
      this.chatBox.sendMessageButton.disable();
      return this.chatApi.sendUserMessage(message, this.toUser._id, (function() {
        this.chatBox.messageInputBox.cleanup();
        this.chatBox.messageInputBox.enable();
        return this.chatBox.sendMessageButton.enable();
      }).bind(this));
    };

    ChatBoxConnect.prototype.bindMessageDeliveredStatusChange = function() {
      return this.chatApi.bind('delivered', (function(data) {
        var id, j, len, ref, results;
        ref = data.messageIds;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          id = ref[j];
          results.push(this.chatBox.chatMessagesBox.messageBoxes[id].markAsDelivered());
        }
        return results;
      }).bind(this));
    };

    ChatBoxConnect.prototype.bindMessageViewedStatusChange = function() {
      return this.chatApi.bind('viewed', (function(data) {
        var id, j, len, ref, results;
        ref = data.messageIds;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          id = ref[j];
          results.push(this.chatBox.chatMessagesBox.messageBoxes[id].markAsViewed());
        }
        return results;
      }).bind(this));
    };

    return ChatBoxConnect;

  })();

  window.ChatBoxConnect = ChatBoxConnect;

}).call(this);

//# sourceMappingURL=ChatBoxConnect.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var UsersListBox;

  UsersListBox = (function() {
    function UsersListBox(user1, isHomePage, parent) {
      this.user = user1;
      this.isHomePage = isHomePage;
      this.container = new Element('div.usersList').inject(parent);
      this.initHomeButton();
      new Element('div.title', {
        html: 'Contacts'
      }).inject(this.container);
      this.contacts = new Element('div.contacts').inject(this.container);
      new Element('div.title', {
        html: 'New Users'
      }).inject(this.container);
      this.newUsers = new Element('div.newUsers').inject(this.container);
      this.initLogoutButton();
      this.users = {};
    }

    UsersListBox.prototype.initLogoutButton = function() {
      var logoutBtn;
      logoutBtn = new Element('div.title.btn', {
        html: 'Logout'
      }).inject(this.container);
      return logoutBtn.addEvent('click', function(e) {
        e.preventDefault();
        Ngn.LocalStorage.remove('user');
        window.location = './';
        return window.location.reload(true);
      });
    };

    UsersListBox.prototype.initHomeButton = function() {
      if (!this.isHomePage) {
        this.homePageBtn = new Element('div.title.btn', {
          html: '« Go home'
        }).inject(this.container);
        return this.homePageBtn.addEvent('click', function() {
          window.location.hash = '';
          return window.location.reload(true);
        });
      }
    };

    UsersListBox.prototype._addUser = function(user, messagesCount, isNew) {
      var container, countTag;
      if (this.users[user._id]) {
        return false;
      }
      if (isNew) {
        container = this.newUsers;
      } else {
        container = this.contacts;
      }
      this.users[user._id] = user;
      this.users[user._id].messageCount = messagesCount;
      if (this.users[user._id].messageCount) {
        countTag = '<span>' + this.users[user._id].messageCount + '</span>';
      } else {
        countTag = '';
      }
      this.users[user._id].el = new Element('div.user', {
        html: (user.login || user.phone) + countTag
      }).inject(container);
      if (user.selected) {
        this.users[user._id].el.addClass('selected');
      }
      this.users[user._id].el.addEvent('click', (function() {
        return this.openChat(user.phone);
      }).bind(this));
      return true;
    };

    UsersListBox.prototype.addUser = function(user, messagesCount) {
      if (this._addUser(user, messagesCount) === true) {
        return;
      }
      this.users[user._id].messageCount += messagesCount;
      return this.users[user._id].el.getElement('span').set('html', this.users[user._id].messageCount);
    };

    UsersListBox.prototype.openChat = function(phone) {
      window.location.hash = '#' + phone;
      return window.location.reload(true);
    };

    UsersListBox.prototype.addNotice = function(userId, notice) {};

    return UsersListBox;

  })();

  window.UsersListBox = UsersListBox;

}).call(this);

//# sourceMappingURL=UsersListBox.js.map

// Generated by CoffeeScript 1.12.0
(function() {
  var UsersListConnect;

  UsersListConnect = (function() {
    function UsersListConnect(chatApi, usersListBox) {
      this.chatApi = chatApi;
      this.usersListBox = usersListBox;
    }

    UsersListConnect.prototype.start = function() {
      return this.chatApi.start((function(toUser) {
        return this.onStart();
      }).bind(this));
    };

    UsersListConnect.prototype.onStart = function() {
      this.loadContactsFromMessages();
      return this.waitForNewUserMessages();
    };

    UsersListConnect.prototype.loadContactsFromMessages = function() {
      return this.chatApi.request('contacts/getFromMessages', {
        token: this.chatApi.token
      }, (function(userIds) {
        var i, len, results, userId;
        results = [];
        for (i = 0, len = userIds.length; i < len; i++) {
          userId = userIds[i];
          results.push(this.addToNewUsersList(userId, 0));
        }
        return results;
      }).bind(this));
    };

    UsersListConnect.prototype.waitForNewUserMessages = function() {
      return this.chatApi.bind('newUserMessages', (function(data) {
        var counts, i, len, message, ref, results, userId;
        counts = {};
        ref = data.messages;
        for (i = 0, len = ref.length; i < len; i++) {
          message = ref[i];
          if (!counts[message.userId]) {
            counts[message.userId] = 0;
          }
          counts[message.userId]++;
        }
        results = [];
        for (userId in counts) {
          results.push(this.addToNewUsersList(userId, counts[userId]));
        }
        return results;
      }).bind(this));
    };

    UsersListConnect.prototype.addToNewUsersList = function(userId, messagesCount) {
      return this.chatApi.loadUserInfo(userId, (function(user) {
        if (this.chatApi.toUser && this.chatApi.toUser._id === user._id) {
          user.selected = true;
        }
        return this.usersListBox.addUser(user, messagesCount);
      }).bind(this));
    };

    return UsersListConnect;

  })();

  window.UsersListConnect = UsersListConnect;

}).call(this);

//# sourceMappingURL=UsersListConnect.js.map

// Generated by CoffeeScript 1.11.1
(function() {
  var UsersListByPhoneConnect,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UsersListByPhoneConnect = (function(superClass) {
    extend(UsersListByPhoneConnect, superClass);

    function UsersListByPhoneConnect() {
      return UsersListByPhoneConnect.__super__.constructor.apply(this, arguments);
    }

    return UsersListByPhoneConnect;

  })(UsersListConnect);

  window.UsersListByPhoneConnect = UsersListConnect;

}).call(this);

//# sourceMappingURL=UsersListByPhoneConnect.js.map
