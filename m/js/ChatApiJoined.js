// Generated by CoffeeScript 1.11.1
(function() {
  var ChatApiJoined,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ChatApiJoined = (function(superClass) {
    extend(ChatApiJoined, superClass);

    function ChatApiJoined() {
      return ChatApiJoined.__super__.constructor.apply(this, arguments);
    }

    ChatApiJoined.prototype.startSocket = function(token, chatId, onJoined) {
      var called, socket;
      socket = ChatApiJoined.__super__.startSocket.call(this, token);
      this.chatId = chatId;
      called = false;
      socket.on('authenticated', (function() {
        this.chatId = chatId;
        socket.emit('join', {
          chatId: chatId
        });
        if (called) {
          return;
        }
        called = true;
        return onJoined();
      }).bind(this));
      return socket;
    };

    ChatApiJoined.prototype.startChatWithUser = function(toUser, onComplete) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/chat/getOrCreateByTwoUsers',
        onComplete: (function(chat) {
          if (!chat) {
            return;
          }
          chat = JSON.parse(chat);
          if (chat.error) {
            throw new Error(chat.error);
          }
          this.data = chat;
          return this.startSocket(this.user.token, chat.chatId, onComplete);
        }).bind(this)
      }).get({
        token: this.user.token,
        userId: toUser._id
      });
    };

    return ChatApiJoined;

  })(ChatApi);

  window.ChatApiJoined = ChatApiJoined;

}).call(this);

//# sourceMappingURL=ChatApiJoined.js.map
