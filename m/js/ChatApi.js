// Generated by CoffeeScript 1.11.1
(function() {
  var ChatApi;

  ChatApi = (function() {
    function ChatApi(user, config) {
      this.user = user;
      this.config = config;
      MicroEvent.mixin(this);
    }

    ChatApi.prototype.restart = function() {
      this.socket.disconnect();
      return this.socket.connect();
    };

    ChatApi.prototype.getUserInfo = function(phone, onComplete) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/user/info',
        onComplete: (function(userInfo) {
          userInfo = JSON.parse(userInfo);
          return onComplete(userInfo);
        })
      }).get({
        phone: phone
      });
    };

    ChatApi.prototype.login = function(onComplete) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/login',
        onComplete: (function(data) {
          data = JSON.parse(data);
          if (data.error) {
            throw new Error(data.error);
          }
          this.user = Object.assign(this.user, data);
          return onComplete();
        }).bind(this)
      }).get(this.user);
    };

    ChatApi.prototype.start = function() {
      throw new Error('abstract');
    };

    ChatApi.prototype.startChatWithUser = function(toUser, onComplete) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/chat/getOrCreateByTwoUsers',
        onComplete: (function(chat) {
          if (!chat) {
            return;
          }
          chat = JSON.parse(chat);
          if (chat.error) {
            throw new Error(chat.error);
          }
          this.data = chat;
          return this.startSocket(this.user.token, chat.chatId, onComplete);
        }).bind(this)
      }).get({
        token: this.user.token,
        userId: toUser._id
      });
    };

    ChatApi.prototype.startChatById = function(data, chatId) {
      return new Request({
        url: this.config.baseUrl + '/api/v1/chat/get',
        onComplete: (function(chat) {
          if (!chat) {
            return;
          }
          chat = JSON.parse(chat);
          if (chat.error) {
            throw new Error(chat.error);
          }
          this.data = chat;
          console.log('CHAT BY ID ' + chat.chatId);
          return this.startSocket(data.token, chat.chatId);
        }).bind(this)
      }).get({
        token: data.token,
        chatId: chatId
      });
    };

    ChatApi.prototype.startSocket = function(token, chatId, onJoin) {
      var socket;
      this.token = token;
      this.chatId = chatId;
      if (this.config.baseUrl) {
        socket = io.connect(this.config.baseUrl);
      } else {
        socket = io.connect();
      }
      this.socket = socket;
      socket.on('connect', (function() {
        return socket.emit('authenticate', {
          token: token
        });
      }).bind(this));
      return socket.on('authenticated', (function() {
        this.chatId = chatId;
        socket.emit('join', {
          chatId: chatId
        });
        return onJoin();
      }).bind(this)).on('event', (function(data) {
        console.log(data);
        return this.trigger(data.type, data);
      }).bind(this)).on('unauthorized', function(msg) {
        return console.log('unauthorized: ' + JSON.stringify(msg.data));
      });
    };

    ChatApi.prototype.sendUserMessage = function(message, userId, onComplete) {
      if (!this.chatId) {
        throw new Error('Chat has not started');
      }
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/userSend',
        onComplete: onComplete
      }).get({
        token: this.token,
        userId: userId,
        chatId: this.chatId,
        message: message
      });
    };

    ChatApi.prototype.loadHistory = function() {
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/list',
        onComplete: (function(messages) {
          messages = JSON.parse(messages);
          return this.trigger('historyLoaded', messages);
        }).bind(this)
      }).get({
        token: this.token,
        chatId: this.chatId
      });
    };

    ChatApi.prototype.sendMessage = function(message, onComplete) {
      if (!this.chatId) {
        throw new Error('Chat has not started');
      }
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/send',
        onComplete: onComplete
      }).get({
        token: this.token,
        chatId: this.chatId,
        message: message
      });
    };

    return ChatApi;

  })();

  ChatApi.tts = function(timestamp) {
    var date, formattedTime, hours, minutes, monthNames;
    date = new Date(timestamp);
    hours = date.getHours();
    monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    minutes = "0" + date.getMinutes();
    formattedTime = date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + hours + ':' + minutes.substr(-2);
    return formattedTime;
  };

  window.ChatApi = ChatApi;

}).call(this);

//# sourceMappingURL=ChatApi.js.map
