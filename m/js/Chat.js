// Generated by CoffeeScript 1.11.1
(function() {
  var Chat,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Chat = (function(superClass) {
    extend(Chat, superClass);

    function Chat() {
      return Chat.__super__.constructor.apply(this, arguments);
    }

    Chat.prototype.messages = [];

    Chat.prototype.config = {
      baseUrl: ''
    };

    Chat.prototype.startSocket = function(token, chatId) {
      var socket;
      this.token = token;
      this.chatId = chatId;
      if (this.config.baseUrl) {
        socket = io.connect(this.config.baseUrl);
      } else {
        socket = io.connect();
      }
      this.socket = socket;
      socket.on('connect', (function() {
        return socket.emit('authenticate', {
          token: token
        });
      }).bind(this));
      return socket.on('authenticated', (function() {
        this.chatId = chatId;
        return socket.emit('join', {
          chatId: chatId
        });
      }).bind(this)).on('event', (function(data) {
        console.log(data);
        this.trigger(data.type, data);
        if (data.type === 'joined') {
          return this.loadHistory();
        }
      }).bind(this)).on('unauthorized', function(msg) {
        return console.log('unauthorized: ' + JSON.stringify(msg.data));
      });
    };

    Chat.prototype.sendMessage = function(message, onComplete) {
      if (!this.chatId) {
        throw new Error('Chat has not started');
      }
      return new Request({
        url: this.config.baseUrl + '/api/v1/message/send',
        onComplete: onComplete
      }).get({
        token: this.token,
        chatId: this.chatId,
        message: message
      });
    };

    return Chat;

  })(ChatApi);

  Chat.tts = function(timestamp) {
    var date, formattedTime, hours, minutes, monthNames;
    date = new Date(timestamp);
    hours = date.getHours();
    monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    minutes = "0" + date.getMinutes();
    formattedTime = date.getDate() + ' ' + monthNames[date.getMonth()] + ' ' + hours + ':' + minutes.substr(-2);
    return formattedTime;
  };

  window.Chat = Chat;

}).call(this);

//# sourceMappingURL=Chat.js.map
